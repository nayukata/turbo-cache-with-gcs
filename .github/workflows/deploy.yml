# Google Cloudへのデプロイワークフロー
name: Deploy to Google Cloud

# プッシュ時に実行
on:
  push:

# 環境変数の設定
env:
  # GCP関連の設定
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # GCPプロジェクトID
  REGION: asia-northeast1 # デプロイリージョン（東京）
  SERVICE_NAME: turbo-demo-web # Cloud Runサービス名

  # Artifact Registry（Dockerイメージ保存）の設定
  REGISTRY: ${{ secrets.GCP_PROJECT_ID }} # レジストリ名
  REPOSITORY: turbo-demo # リポジトリ名
  IMAGE_NAME: web # イメージ名

  # ✅ キャッシュサーバー Turborepoリモートキャッシュの設定
  TURBO_API: ${{ secrets.TURBO_API }} # キャッシュサーバーサーバーURL
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }} # キャッシュサーバー認証トークン
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }} # キャッシュサーバーチーム名

# 必要な権限
permissions:
  id-token: write # OIDC認証用
  contents: read # リポジトリ読み取り用

jobs:
  deploy:
    name: ビルド & デプロイ
    runs-on: ubuntu-latest

    steps:
      # 1. ソースコードをチェックアウト
      - name: ソースコードの取得
        uses: actions/checkout@v4

      # 2. pnpm（高速なパッケージマネージャー）のセットアップ
      - name: pnpmのセットアップ
        uses: pnpm/action-setup@v3
        with:
          version: 10

      # 3. Node.jsのセットアップ（pnpmキャッシュ付き）
      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm' # pnpmのキャッシュを有効化

      # 4. ✅ Turboキャッシュのセットアップ（ローカル+リモート対応）
      - name: Turboキャッシュの設定
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-${{ github.ref_name }}-
            turbo-${{ runner.os }}-

      # 5. 依存関係のインストール
      - name: パッケージのインストール
        run: pnpm install --frozen-lockfile

      # 6. ✅ リモートキャッシュ接続テスト
      - name: リモートキャッシュ接続テスト
        run: |
          echo "🔍 リモートキャッシュの設定を確認..."
          echo "TURBO_API: ${{ env.TURBO_API }}"
          echo "TURBO_TEAM: ${{ env.TURBO_TEAM }}"
          echo "TURBO_TOKEN: [設定済み]"

          # ヘルスチェック
          if [ -n "${{ env.TURBO_API }}" ]; then
            echo "📡 キャッシュサーバーのヘルスチェック..."
            curl -f "${{ env.TURBO_API }}/health" || echo "⚠️ ヘルスチェック失敗（サーバーが起動していない可能性）"
          fi

      # 7. ✅ キャッシュサーバーリモートキャッシュでビルド実行
      - name: Turborepoでビルド実行（リモートキャッシュ有効）
        run: |
          # Turbo CLIをグローバルインストール
          pnpm add -g turbo

          # キャッシュサーバーリモートキャッシュでビルド実行
          # 環境変数（TURBO_API, TURBO_TOKEN, TURBO_TEAM）が自動適用
          turbo run build --cache-dir=.turbo --verbosity=2

      # 8. Google Cloudへの認証
      - name: Google Cloud認証
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      # 9. DockerをArtifact Registry用に設定
      - name: Docker認証設定
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # 10. Docker Buildxのセットアップ（マルチプラットフォーム対応）
      - name: Docker Buildxセットアップ
        uses: docker/setup-buildx-action@v3

      # 11. Dockerイメージのビルド&プッシュ
      - name: Dockerイメージのビルド & プッシュ
        uses: docker/build-push-action@v6
        with:
          context: . # ビルドコンテキスト
          file: ./Dockerfile # Dockerファイルのパス
          push: true # イメージをプッシュ
          platforms: linux/amd64 # ✅ アーキテクチャ明示
          # ✅ Turborepoリモートキャッシュ用の環境変数をビルド引数として渡す
          build-args: |
            TURBO_API=${{ env.TURBO_API }}
            TURBO_TOKEN=${{ env.TURBO_TOKEN }}
            TURBO_TEAM=${{ env.TURBO_TEAM }}
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Dockerレイヤーキャッシュの設定（ビルド高速化）
          cache-from: type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:cache,mode=max

      # 12. Cloud Runへのデプロイ
      - name: Cloud Runへデプロイ
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          # 認証なしアクセスを許可
          # メモリ制限: 1GB
          # CPU制限: 1コア
          # 最小インスタンス数: 0（コールドスタート）
          # 最大インスタンス数: 10
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
